#payment_serializers.py
from rest_framework import serializers
from crmapp.models import Payment

class PaymentSerializer(serializers.ModelSerializer):
    class Meta:
        model = Payment
        fields = '__all__'
        read_only_fields = ('transaction_id', 'created_at', 'updated_at')

    def validate_amount(self, value):
        """Ensure the payment amount is positive."""
        if value <= 0:
            raise serializers.ValidationError("The payment amount must be greater than zero.")
        return value

    def validate(self, data):
        """Custom validation for payment data."""
        if 'transaction_id' in data and Payment.objects.filter(transaction_id=data['transaction_id']).exists():
            raise serializers.ValidationError({"transaction_id": "This transaction ID already exists."})
        return data


#payment_views.py
from rest_framework import viewsets, status
from rest_framework.response import Response
from rest_framework.exceptions import ValidationError
from rest_framework.permissions import IsAuthenticated
from rest_framework.authentication import SessionAuthentication
from rest_framework_simplejwt.authentication import JWTAuthentication
from crmapp.models import Payment
from .payment_serializers import PaymentSerializer
from django.db import IntegrityError
import uuid


class PaymentViewSet(viewsets.ModelViewSet):
    authentication_classes = [JWTAuthentication, SessionAuthentication]
    permission_classes = [IsAuthenticated]
    queryset = Payment.objects.all()
    serializer_class = PaymentSerializer

    def create(self, request, *args, **kwargs):
        """Handle payment creation with automatic user assignment."""
        mutable_data = request.data.copy()
        mutable_data['user'] = request.user.id  # Automatically assign the logged-in user

        # Generate a unique transaction ID
        while True:
            transaction_id = str(uuid.uuid4())
            if not Payment.objects.filter(transaction_id=transaction_id).exists():
                mutable_data['transaction_id'] = transaction_id
                break

        serializer = self.get_serializer(data=mutable_data)
        try:
            serializer.is_valid(raise_exception=True)
            self.perform_create(serializer)
            return Response(serializer.data, status=status.HTTP_201_CREATED)
        except IntegrityError:
            return Response(
                {"error": "A unique transaction ID could not be generated."},
                status=status.HTTP_500_INTERNAL_SERVER_ERROR,
            )
        except ValidationError as e:
            return Response(
                {"error": e.detail},
                status=status.HTTP_400_BAD_REQUEST
            )
        except Exception as e:
            return Response(
                {"error": f"An unexpected error occurred: {str(e)}"},
                status=status.HTTP_500_INTERNAL_SERVER_ERROR,
            )

#payment_urls.py
from django.urls import include, path
from rest_framework import routers
from .payment_views import PaymentViewSet

router = routers.DefaultRouter()
router.register(r'payments', PaymentViewSet, basename='payments')

urlpatterns = [
    path('api/', include(router.urls)),
]
